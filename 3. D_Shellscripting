SHELL SCRIPTING
-> Any file where you put series of Linux commands that can be called as shell script.

With logics and conditions.
-Shell script has an extention ".sh"
-Shell script is used to automate the manual and repetitive tasks.

SHELL: Shell interacts as a interface between user and kernel (linux OS)
Shebang:
#!/bin/bash---we call it as shebang- which invokes bash shell. If we don’t use this it uses default shell.
To check the available shells- cat /etc/shells
To check default shell:   echo $SHELL
#!/bin/bash   set -x : debugging code

Q. If you don't use shebang what happens?
-> If you don't use the shebang (also known as hashbang) at the beginning of a shell script, the script may not execute as expected. 
-> The shebang is a special sequence of characters that tells the system which interpreter should be used to execute the script. In the case of shell scripts, the shebang typically specifies the path to the shell interpreter.
-> For example, a common shebang for a Bash script is #!/bin/bash, indicating that the script should be interpreted using the Bash shell.
-> Here's what can happen if you omit the shebang:
1. The script may not execute: Without the shebang, the system won't know which interpreter to use for executing the script. Depending on the configuration of the system, you might encounter an error like "command not found" or "permission denied" when trying to execute the script directly.
2. The script may be executed by the default shell: If you try to execute the script without the shebang using the sh command, it will be interpreted by the default shell on the system (typically /bin/sh). This can lead to compatibility issues if your script relies on specific features or syntax that is not supported by the default shell.
3. The script may behave unexpectedly: Different shells have their own syntax and features. Without the shebang explicitly specifying the intended interpreter, the script may be executed by a different shell, resulting in unexpected behavior or errors.

Q. What are functions in shell script?
-> In a shell script, a function is a block of code that can be reused multiple times throughout the script. 
   Functions are used to break up a script into smaller, more manageable pieces and to promote code reuse.
#!/bin/bash
function add_numbers {
  local result=$(($1 + $2))
  echo $result
}
result=$(add_numbers 5 10)
echo "The result is $result"
-> In this example, the function add_numbers takes two parameters, $1 and $2, and adds them together. 
   The result is then stored in the local variable result and returned using the echo command. 

Q. super block in shell script?
-> Superblock: It is a record of the characteristics of a filesystem. It includes information about size, block size, 
   empty and the filled blocks. Linux also maintains a copy of its superblock in memory. If you are unable to mount 
   your device, this can be due to a Corrupted superblock.
   
---------------------------------------------------------------------------------------------------------------------
Example:
1.	Sample.sh
#!/bin/bash
Echo  “hi this is devops class”
Pwd
ls –al
date
df –h
uname -a

Give execute permission to a file. Sudo chmod 777 filename
To run a shell script file  ./sample.sh

1. Arguments :- some statements or strings or numbers etc which are passed along with the script.
Example
./sample.sh  shreeni 34 bangalore—3 arguments , separated by space
How to read arguments inside the shell script?
$1- 1st argument
$2- 2nd argument
$3- 3rd argument
-
-
-
$n

Example 2
arguments.sh
#!/bin/bash
echo “hi I am $1”
echo “I am aged $2”
echo “I am from $3”
to run this     ./arguments.sh shreeni 31 Bangalore


2. Variables
Are used to assign a value to a keyword.
Example3
 Variables.sh
#!/bin/bash
   a=  pwd
   b=  ls –lrt
   c=  echo “I am shreeni”
echo $a
echo $b
echo $c

Reading the input passed to the script

#!/bin/bash
echo "enter your name"
read name
echo hi $name
echo "enter your place"
read place
echo "i am from $place"
-------------------------------------------------------------------------------------

Special charecters:
--------------------------
--------------------------
These have special meaning to a shell. They are

$0-->Name of the file itself.
$#-->The total number of arguments passed to the script.
$*-->All arguments passed to the script.
$@-->All arguments passed to the script stored in script in array format.
$$-->Process id of current running process
$!-->It gives process id of the last command went into background.
$?--> Status of last executed command. Zero(0)means success and non-zero means failure.

Nohup: No hang up : Keep processes running even after exiting the shell/terminal.

From: shellscript.sh/variables2.html ,The variable $@ is all parameters $1 .. whatever. 
       The variable $*, is similar, but does not preserve any whitespace, and quoting, 
       so "File with spaces" becomes "File" "with" "spaces".

Numerics:  functions of shell script
-----------------
-----------------
-eq--> equals
-gt--> greater than
-lt--> less than
-ge--> greater than or equal to
-le--> less than or equal to
-ne--> not equal to

-----------------------------

maths functions
maths.sh
#!/bin/bash
sum= `expr $1 + $2`
echo "$sum"

Assignment1- Try above script without arguments. read and use for adding.
Assignment 2- Do all maths expr using read and use method.
maths1.sh
#!/bin/bash
a=`expr $1 + $2`
b=`expr $1 - $2`
c=`expr $1 \* $2`
d=`expr $1 / $1`

echo "$a"
echo "$b"
echo "$c"
echo "$d"

------------------------------------------------
Conditional statements:
IF statement:
_______________________
if [condition]
then
   statement
fi
_________________________
Assignment 3 use only if condition "print biggest of 2 numbers"

_________________________
if-else statement
sysntax:
__________________
if [condition]
 then
  statement1
else 
  statement2
fi

_______________________

if-else -if 
syntax:
____________________
if [condition]
 then
  statement1
elif [condition2]
then
  statement2
elif [condition3]
then 
   statement3
else
  statement4
fi
__________________________

examples:

1.Find the passed number is 5(five) or not 

checknum.sh
#!/bin/bash
if [$1 -eq 5 ]; then
 echo "$1 is five"
else
 echo "$1 is not five"
fi
__________________________________

bignumber.sh
#!/bin/bash
if [ $1 -gt $2 ]; then
   echo "$1 is big"
else
   echo "$2 is big"
fi
__________________________________

Restrict the script to pass only 2 numbers as arguments.
__________________________________________________
restrict.sh
#!/bin/bash

if [ $# -ne 2 ]; then
   echo "pass only 2 numbers"
exit 1
fi
_______________________________________________
Assignment 1 is to find biggest of 3 numbers.

_______________________________________________

Find whether the given name is a file or dir or link
fdl.sh
#!/bin/bash
echo "enter the name"
read name

if [ -f $name ]; then
 echo "$name is a file"
elif [ -d $name ]; then
 echo "$name is a dir"
elif [ -L $name ]; then
 echo "$name is a link"
else
 echo "$name does not exist"
fi

______________________________________________

WHILE LOOP: It is used to run a set of commands repeatedly until some condition occurs.

Syntax:
_________________
while [ condition ]
do 
   statement
done
_________________

1.How to print 5 to 1.

5
4
3
2
1
whileloop.sh
#!/bin/bash
num=$1
while [ $num -gt 0 ]
do
echo "$num"
num=`expr $num - 1`
done
_________________________________________


2. Find the factorial of a given number

#!/bin/bash

num=$1 
fact=1

while [ $num -gt 0 ]
do
        fact=`expr $fact \* $num`     
        num=`expr $num - 1`
done
echo "factorial of $1 is $fact"
____________________________________________

Eg: 4!=4*3*2*1=24     5*4*3*2*1=120
_____________________________________
Write a script to print numbers from 1 to 10.
num=1
while [ $num -le 10 ]
do 
  echo $num
  num=`expr $num + 1`
done

#####################################################################################
Assignment:
1.Write a script to Find out whether the entered username and password valid or not
username:admin
passwrd:secret

2.Write a script to print fibonacci series.  o 1 1 2 3 5 8
######################################################################################

WHILE READ LINE: It is used to read each line in a file

syntax:
______________
while read line
do 
   echo $line
done < file
_______________

Eg:
1.Count no of words in each line of a file 

count_words.sh
______________________________________
#!/bin/bash

file=$1
count=1
while read line
do
        words=`echo $line | wc -w`
        echo "$count:$words"
        count=`expr $count + 1`
done < $file



----->to execute above, run ./count_words.sh file_name          -->(passing file name as an argument)
_________________________________________________

OR

Let us assume that the given file name is abc, then

#!/bin/bash

file=abc
count=1

while read line
do
   words=`echo $line | wc -w`
   echo "$count:$words"
   count=`expr $count + 1`
done < "$file"

__________________________________________________

2.Write script to print employee names if their age is more than 50 from below data.

name  employee_id  age
vijay  100         35
Vinay  101         40
Raj    102         55
Rani   103         60
Ajay   104         28

Syn:
#!/bin/bash


file=$1

sed '1 d' $file > temp

while read line
do
        
age=`echo $line | awk -F " " '{print $3}'`

        
if [ $age -gt 50 ]; then
                
echo $line | awk -F " " '{print $1}'
        
fi
done < temp

Syn: awk '{ if ($NF > 50) print }' employee_records.txt | awk '{print $1}'

__________________________________________________

FOR LOOP:A for loop is classified as an iteration statement i.e. it is the repetition of a process within a bash script

syntax:
__________________
for i in value1 value2 value3 value4
do
statement
done
__________________

Eg:
1. Print numbers from 1 to 10
__________________
#!/bin/bash

for num in 1 2 3 4 5 6 7 8 9 10
do
        echo $num
done
_________________
      OR
_________________
#!/bin/bash              

for num in {1..10}
do
        echo $num
done
_________________


2.Print numbers from 1 to 10 incrementing by 2
__________________
#!/bin/bash              

for num in {1..10..2}       --- initiate with 1 and increment by 2 and print upto 10  
do
        echo $num
done
__________________


3.Print the fruits names apple, banana, orange and mango.
____________________
#!/bin/bash
for fruit in apple banana mango orange
do
        echo $fruit
done
_____________________


-----------------------------------------------------------------------------
ls file_name  -- print the file_name if it is present.
ls -l file_name  -- print the file_name with details if it is present.
ls /home/ubuntu/directory  -- lists the files and directories of some other directory from the current directory.
________________________________________________________________________________________________________________



1.Write a shell script to identify whether the given file exist or not in a given directory.
--------------------------------------------------------
#!/bin/bash

ls -l /home/ubuntu/given_dir_name/given_file_name

if [ $? -eq 0 ]; then
        echo "file exists"
else
        echo "file does not exist"
fi
__________________________________________________________________________________________________
2.Write a shell script to retain recent 30 files in a perticular directory and delete other files. 
-------------------------------------
#!/bin/bash
total=`ls -l | wc -l`
remaining=`expr $total - 30`  

if [ $remaining -gt 0 ]; then
        ls -rt | head -$remaining | xargs rm -rf
        echo "Recent 30 files are retained and others files are deleted"
else
        echo "there are no more than 30 files"
fi
---------------------------------------------

#CRONTAB:The crontab is a list of commands that you want to run on a regular schedule, 
and also the name of the command used to manage that list.
=========

*           *            *               *            *
Min        hours        Date            month       Day of the week
(0-59 min)  (0-23hrs)  (1-31 days)     (1-12)        (00-06) 00-sunday
                                                             01-Monday
                                                             -
                                                             06-saturday
Commands:
export VISUAL=vi
crontab -e   --> to edit the crontab job
crontab -l   --> to view the crontab jobs
systemctl status cron

syntax:
* * * * * /path to script

Examples:
run at 10am everyday
00 10 * * * cd /test/d3/dir/shellscript && ./simple.sh

run script at 1 pm every friday
00 13 * * 05 /script path

run script at 1 pm every monday to friday:
00 13 * * 01-05 /script path

run script at 8:30pm every tuesday and thursday
30 20 * * 02,04 /script path

run script at 10pm coming monday to saturday
00 22 22-27 11 01-06 /script path

run script every 30 min
*/30 * * * * /script path

run script every  2 min
*/2 * * * * /script path

run script for every min
* * * * * /script path

run script every hour
00 * * * * /script path

run script every day
00 00 * * * /script path 

run script for every 2 hour
* */2 * * * /script path

run script for every 2 days
00 00 */2 * * /script path

run script for every year:
00 00 01 01 * /script path


Note: 
1) Crontab will always schedule scripts for minutes and will not schedule for seconds.
2) If you specify all * then script will run every minute.
* * * * *

2. anacron:
   – `anacron` is also a time-based job scheduler like `cron`, but it is designed to handle tasks that are meant to be executed on systems that may not be continuously running, such as laptops or desktop computers that are regularly powered off or in sleep mode.
   – Tasks scheduled with `anacron` have more flexibility in execution time and do not depend on specific intervals. Instead, they have a defined delay before execution, typically measured in days. When the system is powered on, `anacron` checks if the specified delay has passed since the last execution, and if so, it runs the task.
_______________________

swap numbers
# !/bin/bash
   
# Program to swap two numbers
   
# Static input of the
# number
first=5
second=10
   
temp=$first
first=$second
second=$temp
  
echo "After swapping, numbers are:"
echo "first = $first, second = $second"

https://www.ubuntupit.com/simple-yet-effective-linux-shell-script-examples/

How will you find the recently modified commit//file that have been recently committed how do u find//git log

Q: shell script to delete recently created 3 files.
#!/bin/bash
ls -t|head 3|rm

----------------------------------------------------------------------------
#!/bin/bash

echo "enter a string"
read s
rvs='echo $s | $rev'
if [ $rev=$s ] ; then 
echo "it is palindrome"
else
echo "it is not palindrome"
fi

---------------------------------------------------------------------------------
Palindrome of strin:
echo "Enter the string:" 
read s 
rvs=`echo $s | rev` 
if [ $s = $rvs ] then 
echo "It is palindrome" 
else echo 
"It is not" 
fi
--------------------------------------------------------------------------------------
for reversing of string
#!/bin/bash
str="$1"
reversed_string=""
len=${#str}
for (( i=$len-1; i>=0; i-- ))
do
reversed_string="$reversed_string${str:$i:1}"
done
echo "$reversed_string"

----------------------------------------------------------------------------------------------------
1. Automated data backups to S3: A shell script can be created to automate the process of backing up data, 
   such as databases or important files. This script can be scheduled to run regularly using a cron job. 
   The script can compress the data and transfer it to a remote server or backup location. 
   Here's an example of a backup script using the tar command:
   
#!/bin/bash
NOW=$(date +"%Y-%m-%d")
BACKUP_DIR="/path/to/backup/dir"
SOURCE_DIR="/path/to/data"
BACKUP_FILE="backup-$NOW.tar.gz"

cd $SOURCE_DIR
tar -czvf $BACKUP_DIR/$BACKUP_FILE .

#!/bin/bash
BACKUP_DIR="/path/to/important/files"
DATE=$(date +%Y%m%d)
BACKUP_FILE="backup_$DATE.tar.gz"
tar -czf /tmp/$BACKUP_FILE $BACKUP_DIR
aws s3 cp /tmp/$BACKUP_FILE s3://your-bucket-name/backups/$BACKUP_FILE

====================================================================================

2. User account creation: A shell script can be created to automate the process of creating user accounts. 
   This script can prompt the administrator for input and create the user account with the appropriate permissions. 
   Here's an example of a user creation script:
#!/bin/bash
read -p "Enter username: " USERNAME
useradd $USERNAME
passwd $USERNAME
chown $USERNAME:$USERNAME /home/$USERNAME
chmod 700 /home/$USERNAME

=================================================================================================
3.  Disk Space Monitoring: A shell script can be created to monitor system resources, such as disk space or CPU usage. 
   This script can be scheduled to run regularly using a cron job and alert the administrator if thresholds are exceeded. 
   Here's an example of a disk space monitoring script:

   #!/bin/bash
ALERT_PERCENT=90
CURRENT_PERCENT=$(df -h / | awk '{print $5}' | tail -n 1 | sed 's/%//')
if [ "$CURRENT_PERCENT" -gt "$ALERT_PERCENT" ]; then
  echo "Disk usage exceeded $ALERT_PERCENT% on $(hostname) at $(date)" | mail -s "Disk Space Alert" admin@example.com
fi

=======================================================================================================
4. To check the disk size. If the memory reaches 10% it should send email notification saying that the memory reached 10%
______
#!/bin/bash

size=`df -h | sed -n '2p' | awk -F " " '{print $5}' | sed 's/%/ /g'`
disc_name=`df -h | sed -n '2p' | awk -F " " '{print $1}'`
body=`echo "$disc_name has been reached 10%"`

if [ $size -ge 10 ]; then
        echo "size of $disc_name is $size"
        echo "$body" | mail -s "Memory reached 10%" abc@gmail.com
fi

=======================================================================================================
5. Software installation: A shell script can be created to automate the process of installing software on multiple systems. This script can download the necessary files, install dependencies, and configure settings as needed. 

#!/bin/bash
apt-get update
apt-get install -y software-package

=======================================================================================================
6. Log Rotation: This script checks the log file size and compresses it if it exceeds a certain size.

#!/bin/bash
LOG_FILE="/var/log/myapp.log"
MAX_SIZE=10000000  # 10MB in bytes
LOG_SIZE=$(stat -c %s "$LOG_FILE")
if [ $LOG_SIZE -gt $MAX_SIZE ]; then
  mv $LOG_FILE "$LOG_FILE.old"
  touch $LOG_FILE
  echo "Log file rotated" | mail -s "Log Rotation Notification" admin@example.com
fi

=======================================================================================================
7. Check Disk I/O Performance: This script monitors disk I/O performance and alerts if the read/write operations exceed a threshold.

#!/bin/bash
DISK_IO=$(iostat -d | awk '{print $3}' | tail -n 1)
THRESHOLD=100  # In kilobytes per second
if [ $DISK_IO -gt $THRESHOLD ]; then
  echo "Disk I/O exceeds threshold. Current I/O: $DISK_IO KB/s" | mail -s "Disk I/O Alert" admin@example.com
fi

=======================================================================================================
8. Check SSL Certificate Expiry: This script checks the expiry date of an SSL certificate for a given domain.

#!/bin/bash
DOMAIN="yourwebsite.com"
EXPIRE_DATE=$(echo | openssl s_client -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -enddate)
EXPIRY_DATE=$(echo $EXPIRE_DATE | sed 's/.*=\(.*\)/\1/')
EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
CURRENT_TIMESTAMP=$(date +%s)
DIFFERENCE=$(( ($EXPIRY_TIMESTAMP - $CURRENT_TIMESTAMP) / 86400 ))
if [ $DIFFERENCE -lt 30 ]; then
  echo "SSL certificate for $DOMAIN expires in less than 30 days. Expiry Date: $EXPIRY_DATE" | mail -s "SSL Certificate Expiry Alert" admin@example.com
fi

=======================================================================================================
9. Check for Failed Login Attempts: This script checks for failed login attempts in the /var/log/auth.log file.

#!/bin/bash
FAILED_LOGINS=$(grep "Failed password" /var/log/auth.log | wc -l)
THRESHOLD=5
if [ $FAILED_LOGINS -gt $THRESHOLD ]; then
  echo "There have been $FAILED_LOGINS failed login attempts in the last 24 hours." | mail -s "Failed Login Attempt Alert" admin@example.com
fi

=======================================================================================================
11. Log analysis shell scripting example
#!/bin/bash

# define the log file path
LOG_FILE="/path/to/log/file.log"

# define a function to parse log lines
parse_log_line() {
  local line="$1"
  local pattern="(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\s+\[(\w+)\]\s+(.*)"
  if [[ $line =~ $pattern ]]; then
    local timestamp="${BASH_REMATCH[1]}"
    local log_level="${BASH_REMATCH[2]}"
    local message="${BASH_REMATCH[3]}"
    echo "timestamp: $timestamp, log level: $log_level, message: $message"
  fi
}

# loop through the log file and parse each line
while read -r line; do
  parse_log_line "$line"
done < "$LOG_FILE"

=======================================================================================================


